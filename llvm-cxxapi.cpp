//===-- llvm-cxxapi.cpp - Tool for converting LLVM IR to C++ ----*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file implements the driver of llvm-cxxapi tool.
//
//===----------------------------------------------------------------------===//

#include <fstream>
#include <iostream>
#include <string>
#include <system_error>

#include "CxxApiWriterPass.h"
#include "llvm/ADT/STLExtras.h"
#include "llvm/ADT/SmallPtrSet.h"
#include "llvm/ADT/StringExtras.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/LegacyPassManager.h"
#include "llvm/IR/Module.h"
#include "llvm/IRReader/IRReader.h"
#include "llvm/Support/CommandLine.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/FileSystem.h"
#include "llvm/Support/ManagedStatic.h"
#include "llvm/Support/SourceMgr.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

static cl::opt<std::string> InputFilename(cl::Positional,
                                          cl::desc("<input file>"),
                                          cl::init("-"));

static cl::opt<std::string> OutputFilename("o", cl::Optional,
                                           cl::desc("outout file"),
                                           cl::init("-"));

static cl::opt<bool> IR("ir", cl::Optional,
                        cl::desc("Print IR contents as comments."),
                        cl::init(false));

static cl::opt<bool> Short("short", cl::Optional,
                           cl::desc("Generate short variable names."),
                           cl::init(false));

int main(int argc, char **argv) {
    cl::ParseCommandLineOptions(argc, argv, " llvm-cxxapi converter\n");

    LLVMContext Context;

    // Get the output stream
    std::error_code EC;
    raw_fd_ostream Out(OutputFilename, EC, sys::fs::OF_None);
    if (EC) {
        errs() << "Error: Unable to open output file: " << EC.message() << "\n";
        return 1;
    }

    // Compile input file
    SMDiagnostic Err;
    auto M = parseIRFile(InputFilename, Err, Context);
    if (!M) {
        Err.print(argv[0], errs());
        return 1;
    }

    Out << "//\n";
    Out << "// This file is generated by `llvm-cxxapi` based on LLVM "
        << LLVM_VERSION_STRING << "\n"
        << "// , so it may not be compatible with other LLVM versions. If any "
           "errors occur\n// during compilation, it is recommended that you "
           "recompile `llvm-cxxapi` with \n// the specified LLVM version.\n"
           "// https://github.com/zhangjiantao/llvm-cxxapi\n";
    Out << "//\n";
    Out << "// Generate Command:\n";
    Out << "//\n";
    Out << "//   llvm-cxxapi -ir=" << IR << " -short=" << Short << " -o "
        << OutputFilename << " " << InputFilename << "\n";
    Out << "//\n";

    // Run cpp writer pass
    legacy::PassManager PM;
    PM.add(createCxxApiWriterPass(Out, IR, Short));
    PM.run(*M);

    llvm_shutdown();
    return 0;
}
